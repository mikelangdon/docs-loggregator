---
title: Key Performance Indicators 
owner: PCF Metrics Platform Monitoring
---

This topic describes the Key Performance Indicators (KPIs) that you can use to monitor your Pivotal Cloud Foundry (PCF) 
deployment and ensure it is in a good operational state. 

The following PCF v1.10 Key Performance Indicators (KPI) are provided for operators and give general guidance 
on monitoring a PCF deployment using platform component and system (BOSH) metrics. 
Although many metrics are emitted from the platform, the following PCF v1.10 KPIs are 
high-signal-value metrics that can indicate emerging platform issues. 

This alerting and response guidance has been shown to apply to most deployments. 
Pivotal recommends that operators continue to fine-tune the alert measures to their deployment 
by observing historical trends. 
Pivotal also recommends that operators expand beyond this guidance and create new, deployment-specific monitoring
metrics, thresholds, and alerts based on learning from their deployments.

## <a id="auctioneer"></a> Diego Auctioneer Metrics
 
###<a id="AuctioneerLRPAuctionsFailed"></a>Auctioneer AI Placement Failures

<table>
   <tr><th colspan="2" style="text-align: center;"><br> auctioneer.AuctioneerLRPAuctionsFailed<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>The cumulative number of Long Running Processes (LRP) instances that the auctioneer failed to place on Diego cells <br><br>
   
      <strong>Use</strong>: This metric can indicates that PCF is out of container space or that there is a lack of resources within your environment.
   
      This error is most common due to capacity issues, for example, if cells do not have 
      enough resources or if cells are blipping in and out of health.
      <br><br>
      <strong>Origin</strong>: Doppler/Firehose<br>
      <strong>Type</strong>: Counter, integer<br>
      <strong>Frequency</strong>: During each auction<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Per minute average over a 5-minute window</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &ge; 0.5<br>
      <strong>Red critical</strong>: &ge; 1</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>
         <ol>
            <li>Investigate the health of your Diego cells to determine if they
            are the resource type causing the problem.</li> 
            <li>Consider scaling additional cells using Ops Manager.</li>
            <li>If scaling cells does not solve the problem, pull Diego brain logs and BBS logs
             and contact Pivotal Support telling them that LRP auctions are failing.</li>
         </ol>
      </td>
   </tr>
</table>


###<a id="AuctioneerFetchStatesDuration"></a>Auctioneer Time to Fetch Cell State

<table>
   <tr><th colspan="2" style="text-align: center;"><br>auctioneer.AuctioneerFetchStatesDuration<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td> Time in ns that the auctioneer took to fetch state from all the cells when running its auction.<br><br>

      <strong>Use</strong>: Indicates how the cells themselves are performing. 
      Alerting on this metric helps alert that app staging requests to Diego may be failing.

      <br><br>
      <strong>Origin</strong>: Doppler/Firehose<br>
      <strong>Type</strong>: Gauge, integer in ns<br>
      <strong>Frequency</strong>: During event, during each auction<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td> Maximum over the last 5 minutes divided by 1,000,000,000</td>
   </tr>
   <tr>
         <th>Recommended alert thresholds</th>
         <td><strong>Yellow warning</strong>: &ge; 5 s<br>
         <strong>Red critical</strong>: &ge; 10 s</td>
   </tr>
   <tr>
      <th>Recommended response</th>
        <td>
          <ol>
             <li>Check the health of the cells by reviewing the logs and looking for errors.</li>
             <li>Review IaaS console metrics.</li>
             <li>Pull Diego brain logs and cell logs and contact Pivotal Support telling them that fetching cell states is taking too long.</li>
          </ol>
       </td>
   </tr>
</table>

###<a id="AuctioneerLRPAuctionsStarted"></a>Auctioneer Application Instance Starts
<table> 
   <tr><th colspan="2" style="text-align: center;"><br>auctioneer.AuctioneerLRPAuctionsStarted<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Cumulative number of LRP instances that the auctioneer successfully placed on Diego cells.
                        <br><br>
                <strong>Use</strong>: Provides a sense of running system activity levels in your environment. 
                Can also give you a sense of how many application instances have been started over time.
                The recommended measurement, below, can help indicate a lot of container churn. 
                However, for capacity planning purposes, it is more helpful to observe deltas over a long time window. 
                 <br><br>
                 <strong>Origin</strong>: Doppler/Firehose<br>
                 <strong>Type</strong>: Counter (Integer)<br>
                 <strong>Frequency</strong>: During event, during each auction<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Per minute average of <code>auctioneer.AuctioneerLRPAuctionsStarted</code> averaged over a 5-minute window</td>
</tr>
<tr>
<th>Recommended alert thresholds</th>
<td><strong>Yellow warning</strong>: Dynamic<br>
<strong>Red critical</strong>: Dynamic</td>
</tr>
<tr>
<th>Recommended response</th>
<td>
When observing a lot of container churn, do the following:<br><br>
    <ol>
    <li>Look to eliminate explainable causes of temporary churn, such as a deployment or a lot of developer activity</li>
    <li>For extended periods of high or low activity, consider scaling up or down CF components as necessary.</li>
    </ol>
    </td>
</tr>
</table>

###<a id="AuctioneerTaskAuctionsFailed"></a> Auctioneer Task Placement Failures
<table>
     <tr><th colspan="2" style="text-align: center;"><br>auctioneer.AuctioneerTaskAuctionsFailed<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Cumulative number of Tasks that the auctioneer failed to placed on Diego cells.
                        <br><br>
                <strong>Use</strong>: Failing Task auctions indicate a lack of resources 
                        within your environment and that you likely need to scale. 
                        This indicator also increases when the Task is requesting an isolation segment, volume drivers, 
                        or a stack that is unavailable, either not deployed or lacking in sufficient resources to accept the work.
                 <br><br>
                 <strong>Origin</strong>: Doppler/Firehose<br>
                 <strong>Type</strong>: Counter (Float)<br>
                 <strong>Frequency</strong>: During event, during each auction<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Per minute average of <code>auctioneer.AuctioneerTaskAuctionsFailed</code> averaged over a 5-minute window</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: &ge; 0.5 <br>
                <strong>Red critical</strong>: &ge; 1</td>
        </tr>
<tr>
<th>Recommended response</th>
<td>
    <ol>
    <li>Investigate the health of Diego cells.</li>
    <li>Consider scaling additional cells using Ops Manager.</li>
    <li>If scaling cells doesn't solve the problem, 
                        then pull Diego brain logs and BBS logs for troubleshooting, 
                        and contact Pivotal Support telling them that Task auctions are failing.</li>
    </ol>
    </td>
</tr>
</table>

## <a id="bbs"></a> Diego BBS Metrics

###<a id="ConvergenceLRPDuration"></a>BBS Time to Run LRP Convergence
<table>
   <tr><th colspan="2" style="text-align: center;"><br>bbs.ConvergenceLRPDuration<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Time in ns that the BBS took to run its LRP convergence pass. 
          <br><br>
          <strong>Use</strong>: If the convergence run begins taking too long, 
          maybe apps or Tasks are crashing and not being restarted. 
          This symptom can also indicate loss of connectivity to the BBS database.
          <br><br>
          <strong>Origin</strong>: Doppler/Firehose<br>
          <strong>Type</strong>: Gauge (Integer in ns)<br>
          <strong>Frequency</strong>: During event,
                  every 30 seconds when LRP convergence runs, emission should be constant on a running, Diego-based, PCF deployment
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>15-minute maximum of <code>bbs.ConvergenceLRPDuration</code> divided by 1,000,000,000</td>
   </tr>
      <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &ge; 10 s<br>
          <strong>Red critical</strong>: &ge; 20 s</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>
          <ol>
              <li>Check BBS logs for errors.</li>
              <li>Try vertically scaling the BBS VM resources up. 
              For example, add more CPUs/memory depending on its system.cpu/system.memory metrics.</li>
              <li>If that does not solve the issue, pull the BBS logs and contact Pivotal Support 
                  for additional troubleshooting.
          </ol>
          </td>
   </tr>
</table>


###<a id="RequestLatency"></a>BBS Time to Handle Requests
<table>
   <tr><th colspan="2" style="text-align: center;"><br>bbs.RequestLatency<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Time in ns that the BBS took to handle requests, aggregated across all its API endpoints. 
          <br><br>
          <strong>Use</strong>: If this rises, it indicates that the PCF API is slowing. 
          Response to certain "cf" commands is slow if request latency is high.
          <br><br>
          <strong>Origin</strong>: Doppler/Firehose<br>
          <strong>Type</strong>: Gauge (Integer in ns)<br>
          <strong>Frequency</strong>: During event, when the BBS API handles requests, 
                  emission should be constant on a running, Diego-based, PCF deployment<br>
    </tr>
    <tr>
      <th>Recommended measurement</th>
      <td>15 minute maximum of bbs.RequestLatency divided by 1,000,000,000</td>
    </tr>
    <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &ge; 5 s<br>
          <strong>Red critical</strong>: &ge; 10 s</td>
    </tr>
    <tr>
      <th>Recommended response</th>
      <td>
          <ol>
              <li>Check CPU and memory statistics in Ops Manager.</li>
              <li>Check BBS logs for faults and errors that can indicate issues with BBS.</li>
              <li>Try scaling the BBS VM resources up. For example, add more CPUs/memory 
                  depending on its system.cpu/system.memory metrics.</li>
              <li>If the above steps do not solve the issue, then collect a sample of the cell logs 
                  from the BBS VMs and contact Pivotal Support to troubleshoot further.
          </ol>
          </td>
    </tr>
</table>


###<a id="Domain.cf-apps"></a>cf-apps Domain Is Updated
<table>
   <tr><th colspan="2" style="text-align: center;"><br>bbs.Domain.cf-apps<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Indicates if the ‘cf-apps’ domain is up-to-date, meaning that CF App requests 
          from the Cloud Controller are synchronized to Diego-desired application instances (bbs.LRPsDesired) for execution. 
          <code>1</code> means the ‘cf-apps’ domain is up-to-date. 
          <code>0</code> means the ‘cf-apps’ domain is not up-to-date.
          <br><br>
          <strong>Use</strong>: ‘cf-apps’ is used to translate the Cloud Controller desired state into Diego implementation. 
          If it does not stay up-to-date, then the changes requested in Cloud Controller 
          are not guaranteed to propagate throughout the system. 
          If the Cloud Controller and Diego are out of sync, then apps running could vary from what is desired.
          <br><br>
          <strong>Origin</strong>: Doppler/Firehose<br>
          <strong>Type</strong>: Gauge (Float 0 or 1)<br>
          <strong>Frequency</strong>: 30 s<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over the last 5 minutes of <code>bbs.Domain.cf_apps</code></td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: <em>N/A</em> <br>
      <strong>Red critical</strong>: &lt; 1 </td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>
          <ol>
              <li>Check the nysnc bulker logs and BBS logs.</li>
              <li>If the problem continues, pull Diego brain logs and BBS logs 
                  and contact Pivotal Support to say that cf domain is not being kept fresh.</li>
          </ol>
      </td>
   </tr>
</table>

###<a id="LRPsExtra"></a>More Application Instances Than Expected

<table>
     <tr><th colspan="2" style="text-align: center;"><br>bbs.LRPsExtra<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Total number of LRP instances that are no longer desired but still have a BBS record. 
                    When Diego wants to add more apps, the BBS sends a request to the auctioneer 
                    to spin up additional LRPs. 
                        <br><br>
                <strong>Use</strong>: If Diego has more LRP running than expected, 
                        there might be problems with the BBS.<br>
                        Deleting an app with many instances can temporarily spike this metric.  
                        However, a sustained spike in <code>bbs.LRPsExtra</code> is unusual and should be investigated.
                 <br><br>
                 <strong>Origin</strong>: Doppler/Firehose<br>
                 <strong>Type</strong>: Gauge (Float)<br>
                 <strong>Frequency</strong>: 30 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Average over the last 5 minutes of <code>bbs.LRPsExtra</code></td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: &ge; 5<br>
                <strong>Red critical</strong>:  &ge; 10</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Review the BBS logs for proper operation or errors, looking for detailed error messages.</li>
                        <li>If the condition persists, pull the BBS logs and contact Pivotal Support.</li>
                    </ol>
                    </td>
        </tr>
</table>


###<a id="LRPsMissing"></a>Fewer Application Instances Than Expected
<table>
     <tr><th colspan="2" style="text-align: center;"><br>bbs.LRPsMissing<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Total number of LRP instances that are desired but have no record in the BBS.
                        <br><br>
                <strong>Use</strong>: Diego has less LRP running than expected. 
                        When Diego wants to add more apps, the BBS sends a request to the auctioneer 
                        to spin up additional LRPs. 
                        LRPsMissing is the total number of LRP instances that are desired but have no BBS record. 
                        This can indicate issues with the BBS.<br> 
                        An app push with many instances can temporarily spike this metric. 
                        However, a sustained spike in <code>bbs.LRPsMissing</code> is unusual and should be investigated.
                 <br><br>
                 <strong>Origin</strong>: Doppler/Firehose<br>
                 <strong>Type</strong>: Gauge (Float)<br>
                 <strong>Frequency</strong>: 30 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Average over the last 5 minutes of <code>bbs.LRPsMissing</code></td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: &ge; 5<br>
                <strong>Red critical</strong>: &ge; 10</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Review the BBS logs for proper operation or errors, looking for detailed error messages.</li>
                        <li>If the condition persists, pull the BBS logs and contact Pivotal Support.</li>
                    </ol>
                    </td>
        </tr>
</table>


###<a id="bbs.CrashedActualLRPs"></a>Crashed Application Instances
<table>
     <tr><th colspan="2" style="text-align: center;"><br>bbs.CrashedActualLRPs<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Total number of LRP instances that have crashed.
                <br><br>
                <strong>Use</strong>: Indicates how many instances in the deployment are in a crashed state. 
                An increase in <code>bbs.CrashedActualLRPs</code> can indicate several problems, 
                from a bad app with many instances associated, 
                to a platform issue that is resulting in app crashes. 
                This metric is most helpful to create a baseline in a deployment. 
                After a baseline is created, a deployment specific alert can be created to notify of a spike in crashes above trend line. 
                Alert values should be tuned to the deployment. 
                <br><br>
                <strong>Origin</strong>: Doppler/Firehose<br>
                 <strong>Type</strong>: Gauge (Float)<br>
                 <strong>Frequency</strong>: 30 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Average over last 5 minutes of <code>bbs.CrashedActualLRPs</code></td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: Dynamic<br>
                <strong>Red critical</strong>: Dynamic</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Look at the BBS logs for apps that are crashing 
                            and at the cell logs to see if the problem is with the apps themselves, rather than 
                            a platform issue.</li>
                        <li>Before contacting Pivotal Support, pull the BBS logs and, if particular apps are the problem,
                            pull the logs from their cells too.</li>
                    </ol>
                    </td>
        </tr>
</table>

###<a id="1hraverageofbbs.LRPsRunning"></a>Running Application Instances, Rate of Change
<table>
     <tr><th colspan="2" style="text-align: center;"><br>1hr average of bbs.LRPsRunning – prior 1hr average of bbs.LRPsRunning<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Rate of change in application instances being started or stopped on the platform. 
                    It is derived from <code>bbs.LRPsRunning</code>
                    and represents the total number of LRP instances that are running on cells.
                    <br><br>
                    <strong>Use</strong>: Delta reflects upward or downward trend for application instances started or stopped. 
                    Helps to provide a picture of the overall growth trend of the environment for capacity planning. 
                    May want to alert on delta values out of expected range.
                    <br><br>
                 <strong>Origin</strong>: Doppler/Firehose<br>
                 <strong>Type</strong>: Gauge (Float)<br>
                 <strong>Frequency</strong>: During event, 
                         emission should be constant on a running, Diego-based, PCF deployment<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>derived=(1-hour average of <code>bbs.LRPsRunning</code> – prior 1-hour average of <code>bbs.LRPsRunning</code>)</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: Dynamic<br>
                <strong>Red critical</strong>: Dynamic</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                     Scale components as necessary.
                </td>
        </tr>
</table>



## <a id="cell"></a> Diego Cell Metrics

###<a id="rep.CapacityRemainingMemory"></a>Remaining Memory Available — Cell Memory Chunks Available
<table>
   <tr><th colspan="2" style="text-align: center;"><br>rep.CapacityRemainingMemory<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Remaining amount of memory in MiB available for this cell to allocate to containers.
          <br><br>
          <strong>Use</strong>: Indicates the available cell memory.<br>
          Insufficient cell memory can prevent pushing and scaling apps.<br><br>
          The operational value of this metric is to ensure that there are cells with enough capacity to receive 
          pushes of apps. For example, your app push would fail if your app size is 4&nbsp;GB
          and no cell contains at least 4&nbsp;GB. <br><br> 

          <strong>Origin</strong>: Doppler/Firehose<br>
          <strong>Type</strong>: Gauge (Integer in bytes)<br>
          <strong>Frequency</strong>: 30 s<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td><b>For alerting</b>: <ol>
            <li>Determine the size of a standard app in your deployment. This is the size of the <em>free chunk</em> of memory 
                that Diego cells must have to host a new app.</li>
          <li> Determine a threshold: the number of cells that have at least the <em>free chunk</em> at any given time. </li>
          <li> Monitor each Diego cell for <code>rep.CapacityRemainingMemory</code> and count of how many cells have at 
               least the <em>free chunk</em>. Divide the metric by 1000 to get the value in GB.  </li>
          <li> Set an alert to indicate when fewer than the threshold number of cells in your deployment have less than the 
               <em>free chunk</em> of memory.</li></ol> 
          <b>For informational purposes</b>:<br>
           Using the minimum amount of memory in a 30-minute window that the cell can allocate to containers, produce a heatmap showing average variance and density over time. 
             Divide this metric by 1000 to get the value in GB. 
	    
</td>
  </tr>
  <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: Dynamic<br>
          <strong>Red critical</strong>: Dynamic<br>
                 </td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>
          <ol>
              <li>Assign more resources to the cells or assign more cells.</li>
                        <li>Scale additional Diego cells using Ops Manager.</li>
                    </ol>
                    </td>
        </tr>
</table>

###<a id="rep.CapacityRemainingMemory2"></a>Remaining Memory Available — Overall Remaining Memory Available
<table>
   <tr><th colspan="2" style="text-align: center;"><br>rep.CapacityRemainingMemory<br>
       (Alternative Use)<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Remaining amount of memory in MiB available for this cell to allocate to containers.
          <br><br>
          <strong>Use</strong>: Can indicate low memory capacity overall in the platform. 
          Low memory can prevent app scaling and new deployments. 
          The overall sum of capacity can indicate that you need to scale the platform.
          Observing capacity consumption trends over time helps with capacity planning.
          <br><br>
          <strong>Origin</strong>: Doppler/Firehose<br>
          <strong>Type</strong>: Gauge (Integer in bytes)<br>
          <strong>Frequency</strong>: 30 s<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Sum of the total available memory capacity across across all cells for the past 5 minutes<br>
             5 minute sum of <code>rep.CapacityRemainingMemory</code> divided by 0.000001024</td>
  </tr>
  <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &le; 32<br>
          <strong>Red critical</strong>: &le; 16</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>
          <ol>
              <li>Assign more resources to the cells or assign more cells.</li>
              <li>Scale additional Diego cells via Ops Manager.</li>
          </ol>
                    </td>
        </tr>
</table>

###<a id="CapacityRemainingDisk"></a>Remaining Disk Available
<table>
     <tr><th colspan="2" style="text-align: center;"><br> rep.CapacityRemainingDisk<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Remaining amount of disk in MiB available for this cell to allocate to containers.
                    <br><br>
                    <strong>Use</strong>: Low disk capacity can prevent app scaling and new deployments.
                Similar to <code>rep.CapacityRemainingMemory</code>, it is helpful to assess 
                how many chunks of free disk space are above a given threshold. 
                Because Diego staging Tasks can fail without at least 4&nbsp;GB free, 
                the recommended red threshold is based on the minimum disk capacity across the deployment
                falling below 4&nbsp;GB in the previous 5 minutes.
                across the deployment falling below 4GB in the previous 5 minutes.
                 <br><br>
                 <strong>Origin</strong>: Doppler/Firehose<br>
                 <strong>Type</strong>: Gauge (Integer in bytes)<br>
                 <strong>Frequency</strong>: 30 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Minimum over the last 5 minutes of <code>rep.CapacityRemainingDisk</code> divided by 1024 (across all instances)</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: &le; 6<br>
                <strong>Red critical</strong>:&le; 3.5 </td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Assign more resources to the cells or assign more cells.</li>
                        <li>Scale additional cells using Ops Manager.</li>
                    </ol>
                    </td>
        </tr>
</table>


###<a id="RepBulkSyncDuration"></a>Cell Rep Time to Sync
<table>
     <tr><th colspan="2" style="text-align: center;"><br>rep.RepBulkSyncDuration<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Time in ns that the Cell Rep took to sync the ActualLRPs that it claimed with its actual garden containers. 
                        <br><br>
                <strong>Use</strong>: Sync times that are too high can indicate issues with the BBS.
                 <br><br>
                 <strong>Origin</strong>: Doppler/Firehose<br>
                 <strong>Type</strong>: Gauge (Float in ns)<br>
                 <strong>Frequency</strong>: 30 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Maximum over the last 15 minutes of <code>rep.RepBulkSyncDuration</code> divided by 1,000,000,000</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: &ge; 10 s<br>
                <strong>Red critical</strong>: &ge; 20 s </td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Investigate BBS logs for faults and errors.</li>
                        <li>If a particular cell or cells look to be problematic, 
                            pull logs for the cells and the BBS logs before contacting Pivotal Support.</li>
                    </ol>
                    </td>
        </tr>
</table>

###<a id="UnhealthyCell"></a>Unhealthy Cells

<table>
     <tr><th colspan="2" style="text-align: center;"><br>rep.UnhealthyCell<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>The cell periodically checks its health against the garden backend. 
                    For Diego cells, <code>0</code> means healthy, and <code>1</code> means unhealthy.
                    <br><br>
                    <strong>Use</strong>: Set an alert for further investigation if 
                    multiple unhealthy Diego cells are detected in the given time window. 
                    If one cell is impacted, it does not participate in auctions, 
                    but end-user impact is usually low. If multiple cells are impacted, 
                    this can indicate a larger problem with Diego.
                 <br><br>
                 <strong>Origin</strong>: Doppler/Firehose<br>
                 <strong>Type</strong>: Gauge (Float, 0-1)<br>
                 <strong>Frequency</strong>: 30 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Maximum over the last 5 minutes of <code>rep.UnhealthyCell</code></td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: <em>N/A</em><br>
                <strong>Red critical</strong>: &gt; 1 </td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Investigate Diego cell servers for faults and errors.</li>
                        <li>If a particular cell or cells look to be problematic, 
                            pull logs for that cell, as well as the BBS logs before contacting Pivotal Support.</li>
                    </ol>
                    </td>
        </tr>
</table>


## <a id="nsync_bulker"></a> Diego nsync_bulker Metrics

###<a id="DesiredLRPSyncDuration"></a>Nsync-bulker Time to Sync
<table>
     <tr><th colspan="2" style="text-align: center;"><br>nsync_bulker.DesiredLRPSyncDuration<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Time in ns that the nsync-bulker took to synchronize CF apps and Diego DesiredLRPs.
                    <br><br>
                    <strong>Use</strong>: Cloud Controller and Diego brain should be kept synchronized. 
                    This symptom can indicate that the BBS database is unhealthy. 
                 <br><br>
                 <strong>Origin</strong>: Doppler/Firehose<br>
                 <strong>Type</strong>: Gauge (Float in ns)<br>
                 <strong>Frequency</strong>: 30 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Maximum over the last 15 minutes of <code>nsync_bulker.DesiredLRPSyncDuration</code> 
                    divided by 1,000,000,000</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: &ge; 10 s<br>
                <strong>Red critical</strong>: &ge; 20 s</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                        Investigate BBS metrics and logs and Cloud Controller Bridge logs for errors.
                    </td>
        </tr>
</table>

##<a id="route_emitter"></a>Diego router-emitter Metrics

###<a id="RouteEmitterSyncDuration"></a>Route Emitter Time to Sync
<table>
     <tr><th colspan="2" style="text-align: center;"><br>route_emitter.RouteEmitterSyncDuration<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Time in ns that the active route-emitter took to perform its synchronization pass. 
                    <br><br>
                    <strong>Use</strong>: Increases in this metric indicate that the route emitter might be having 
                    trouble maintaining an accurate routing table to broadcast to the Gorouters. 
                    Alerting values need to be tuned per the deployment, based on historical data adjusted based on observations over time. 
                    The suggested starting point is &ge; 10 for the yellow threshold and &ge; 20 for the critical threshold. 
                    Pivotal has observed on its Pivotal Web Services deployment that above 20 s, the BBS may be failing.
                 <br><br>
                 <strong>Origin</strong>: Doppler/Firehose<br>
                 <strong>Type</strong>: Gauge (Float in ns)<br>
                 <strong>Frequency</strong>: 30 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Maximum over the last 15 minutes of <code>route_emitter.RouteEmitterSyncDuration</code> divided by 1,000,000,000</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: Dynamic<br>
                <strong>Red critical</strong>: Dynamic</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                        Investigate the routing table and Diego brains for errors.
                </td>
        </tr>
</table>

###<a id="ConsulDownMode"></a>Consul Up or Down
<table>
     <tr><th colspan="2" style="text-align: center;"><br>route_emitter.ConsulDownMode<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td><code>1</code> means the system is healthy, and <code>0</code> means that 
                    route emitter detects that Consul is down.
                    <br><br>
                    <strong>Use</strong>: During installation or upgrade, this can indicate that Consul is down.
                    Loss of the Consul cluster results in apps becoming unavailable 
                    because their routes were pruned from the routing table.
                 <br><br>
                 <strong>Origin</strong>: Doppler/Firehose<br>
                 <strong>Type</strong>: Gauge (Float, 0-1)<br>
                 <strong>Frequency</strong>: Periodically, emission should be constant on a running, Diego-based, PCF deployment<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Average over the last 5 minutes of <code>route_emitter.ConsulDownMode</code></td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: <em>N/A</em><br>
                <strong>Red critical</strong>: Not equal to 0 </td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>During upgrade, reduce the Consul server nodes to 1 and then upgrade.</li>
                        <li>Outside of installation or upgrading, consider disaster recovery for Consul.</li>
                    </ol>
                    </td>
        </tr>
</table>

## <a id="gorouter"></a> Gorouter Metrics

###<a id="total_requests"></a>Router Throughput
<table>
   <tr><th colspan="2" style="text-align: center;"><br>gorouter.total_requests<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>The lifetime (since this Gorouter VM started) number of requests completed by component 
          <br><br>
          <strong>Use</strong>: Provides insight into the overall traffic flow through a deployment. 
          For performance and capacity management, consider this metric a measure of router throughput 
          and convert it to requests-per-second, by deriving <code>per_second(sum:gorouter.total_requests{*})</code>.
          This helps you see trends in throughput rate that indicate a need to scale the Gorouter.
          Use the trends you observe to tune the threshold alerts for this metric. 
          <br><br>
          <strong>Origin</strong>: Doppler/Firehose<br>
          <strong>Type</strong>: Counter (Integer)<br>
          <strong>Frequency</strong>: 5 s<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over the last 5 minutes of the per second calculation of <code>gorouter.total_requests</code></td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: Dynamic<br>
          <strong>Red critical</strong>: Dynamic</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>For optimizing the Gorouter, consider the requests-per-second
          derived metric in the context of router latency and Gorouter VM CPU utilization.
          In testing the Gorouter, Pivotal observed that at approximately 2500 requests 
          per second, latency increases. <br><br>
          To increase throughput, while keeping latency low, 
          scale the Gorouters, either horizontally or vertically, 
          while watching the Gorouter CPU utilization metric.
   </tr>
</table>

###<a id="latency"></a>Router Handling Latency
<table>
     <tr><th colspan="2" style="text-align: center;"><br>gorouter.latency<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>The time in milliseconds that the Gorouter takes to handle requests to its app endpoints. 
                    This is the average round trip response time to an app, which includes router handling. 
                    <br><br>
                    <strong>Use</strong>: Indicates how Gorouter jobs in PCF are impacting overall app responsiveness. 
                    Latencies above 100 ms can indicate problems with the network, misbehaving apps, 
                    or the need to scale the Gorouter itself due to ongoing traffic congestion. 
                    An alert value on this metric should be tuned to the specifics of the deployment; 
                    a suggested starting point is 100 ms. 
                 <br><br>
                 <strong>Origin</strong>: Doppler/Firehose<br>
                 <strong>Type</strong>: Gauge (Float in ms)<br>
                 <strong>Frequency</strong>: Emitted per Gorouter request,
                         emission should be constant on a running, Diego-based, PCF deployment
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Average over the last 30 minutes of <code>gorouter.latency</code></td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: Dynamic<br>
                <strong>Red critical</strong>: Dynamic</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>Extended periods of high latency can point to several factors. 
                    The Gorouter latency measure includes network and app latency impacts as well.<br><br>
                    <ol>
                        <li>First inspect logs for network issues and indications of misbehaving apps.</li>
                        <li>Even if it appears that the Gorouter needs to scale due to ongoing traffic congestion, 
                            do not scale on the latency metric alone. 
                            Also look at the CPU utilization of the Gorouter VMs.</li>
                        <li>Keep CPU utilization within a maximum 60-70% range.</li>
                        <li>Resolve high utilization by scaling the Gorouter.</li>
                        <li>To increase throughput, while keeping latency low, 
                            scale the Gorouters, either horizontally or vertically, 
                            while watching the <a href="#cpu.user">system.cpu.user</a> metric for the Gorouter.</li>
                    </ol>
                    </td>
        </tr>
</table>

###<a id="mssincelastregistryupdate"></a>Time Since Last Route Register Received
<table>
     <tr><th colspan="2" style="text-align: center;"><br>gorouter.ms_since_last_registry_update<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Time in milliseconds since the last route register was received.
                        <br><br>
                <strong>Use</strong>: Indicates if routes are not being registered to apps correctly. 
                 <br><br>
                 <strong>Origin</strong>: Doppler/Firehose<br>
                 <strong>Type</strong>: Gauge (Float in ms)<br>
                 <strong>Frequency</strong>: 30 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Maximum over the last 5 minutes of <code>gorouter.ms_since_last_registry_update</code></td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: <em>N/A</em> <br>
                <strong>Red critical</strong>: &gt; 30,000<br>
                        This threshold is suitable for normal platform usage. It alerts if it has been 
                        at least 30 seconds since the Gorouter last received a message from an app.</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Look at the Gorouter and route_emitter logs to look for connection issues to NATS.</li>
                        <li>Check the BOSH logs to see if the NATS, Gorouter, or route_emitter VMs are failing.</li>
                        <li>Look more broadly at the health of all VMs, particularly Diego-related VMs.</li>
                        <li>If problems persist, pull the Gorouter and route_emitter logs and contact 
                            Pivotal Support to say there are consistently long delays in route registry.</li>
                    </ol>
                    </td>
        </tr>
</table>

###<a id="bad_gateways"></a>Router Error: 502 Bad Gateway

<table>
     <tr><th colspan="2" style="text-align: center;"><br>gorouter.bad_gateways<br><br></th></tr>
     <tr>
         <th width="25%">Description</th>
            <td>The lifetime (since this Gorouter VM started) number of bad gateways, 502 response from Gorouter itself.<br>
                The Gorouter emits a 502 bad gateway error when it has a route in the routing table 
                and, in attempting to make a connection to the backend, finds that backend not there, that it doesn't exist.
                    <br><br>
                    <strong>Use</strong>: Indicates that route tables might be stale.
                    Stale routing tables suggest an issue in the route register management plane, 
                    which indicates that something has likely changed with the locations of the containers. 
                    Always investigate unexpected increases in this metric.
                    <br><br>
                 <strong>Origin</strong>: Doppler/Firehose<br>
                 <strong>Type</strong>: Count (Integer, Lifetime)<br>
                 <strong>Frequency</strong>: 5 s<br>
             </td>
     </tr>
     <tr>
                <th>Recommended measurement</th>
                <td>Average over the last 5 minutes of the per second delta of <code>gorouter.bad_gateways</code></td>
     </tr>
     <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: Dynamic<br>
                <strong>Red critical</strong>: Dynamic</td>
     </tr>
     <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Look in the Gorouter and route_emitter logs for connection issues to NATS.</li>
                        <li>Check the BOSH logs to see if the NATS, Gorouter, or route_emitter VMs are failing.</li>
                        <li>Look broadly at the health of all VMs, particularly Diego-related VMs.</li>
                        <li>If problems persist, pull Gorouter and route_emitter logs and contact 
                            Pivotal Support to say there has been an unusual increase in Gorouter bad gateway responses.</li>
                    </ol>
                    </td>
     </tr>
</table>

###<a id="responses.5xx"></a>Router Error: Server Error
<table>
     <tr><th colspan="2" style="text-align: center;"><br>gorouter.responses.5xx<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>The lifetime (since this Gorouter VM started) number of requests completed by the component 
                    for HTTP status family 5xx, server errors.
                    <br><br>
                    <strong>Use</strong>: A repeatedly crashing app is often the cause of a big increase in 5xx responses.
                    However, response issues from apps can also cause an increase in 5xx responses.
                    Always investigate an unexpected increase in this metric.
                 <br><br>
                 <strong>Origin</strong>: Doppler/Firehose<br>
                 <strong>Type</strong>: Counter (Integer)<br>
                 <strong>Frequency</strong>: 5 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>5-minute average of the per second delta of <code>gorouter.responses.5xx</code></td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: Dynamic<br>
                <strong>Red critical</strong>: Dynamic</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Look for out-of-memory errors and other app-level errors.</li>
                        <li>As a temporary measure, ensure that the troublesome app is scaled to more than one instance.</li>
                    </ol>
                    </td>
        </tr>
</table>

###<a id="total_routes"></a>Number of Gorouter Routes Registered
<table>
     <tr><th colspan="2" style="text-align: center;"><br>gorouter.total_routes<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>The current total number of routes registered with the Gorouter
                    <br><br>
                    <strong>Use</strong>: Indicates uptake and gives a picture of the overall 
                    growth of the environment for capacity planning.
                    Use this metric to alert you if the number of routes falls outside of the normal
                    range for your deployment.
                    For example, dramatic increases in the total routes outside of expected business 
                    events might point to a denial-of-service attack. 
                    Or, dramatic decreases in this metric volume might indicate a problem with 
                    the route registration process (occurs periodically), such as an
                    app outage or that something in the route register management plane has failed.<br><br>
                    This metric is good to draw attention to a dramatic drop
                    on a dashboard. However, for alerting, trigger alerts from the 
                    <code>gorouter.ms_since_last_registry_update</code> and not the <code>gorouter.total_routes</code>
                    metric. 
                 <br><br>
                 <strong>Origin</strong>: Doppler/Firehose<br>
                 <strong>Type</strong>: Gauge (Float)<br>
                 <strong>Frequency</strong>: 30 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>5-minute average of the per second delta of <code>gorouter.bad_gateways</code></td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: Dynamic<br>
                <strong>Red critical</strong>: Dynamic</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>For capacity needs, scale up or down the Gorouter VMs as necessary.</li>
                        <li>For significant drops in current total routes, see the 
                           <a href="#mssincelastregistryupdate"> <code>gorouter.ms_since_last_registry_update</code></a>
                            metric value for additional context.</li>
                        <li>Look at the Gorouter and route_emitter logs to look for connection issues to NATS.</li>
                        <li>Check the BOSH logs to see if the NATS, Gorouter or route_emitter VMs are failing.</li>
                        <li>Look broadly at the health of all VMs, particularly Diego-related VMs.</li>
                        <li>If problems persist, pull the Gorouter and route_emitter logs and contact Pivotal Support.</li>
                    </ol>
                    </td>
        </tr>
</table>


## <a id="doppler-server"></a> Doppler Server Metrics

###<a id="listeners.receivedEnvelopes"></a>Firehose Throughput
<table>
     <tr><th colspan="2" style="text-align: center;"><br>DopplerServer.listeners.totalReceivedMessageCount
<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>The total number of messages received across 
                    all of the Doppler’s listeners (UDP, TCP, TLS, and GRPC).
                    <br><br>
                    <strong>Use</strong>: Provides insight into how much traffic is being 
                    handled by the logging system. This metric is an indicator of logging consistency.
                 <br><br>
                 <strong>Origin</strong>: Doppler/Firehose<br>
                 <strong>Type</strong>: Counter (Integer)<br>
                 <strong>Frequency</strong>: 5 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Delta per minute of <code>DopplerServer.listeners.totalReceivedMessageCount
</code> 
                over a 5-minute window</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: Dynamic<br>
                <strong>Red critical</strong>: Dynamic</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                        Scale up the Firehose log receiver and Dopplers.<br>
                        Do not scale down these components because spikes in throughput can cause log loss.
                    </ol>
                    </td>
        </tr>
</table>

###<a id="deriveddopplerserver.doppler"></a>Firehose Dropped Messages
<table>
     <tr><th colspan="2" style="text-align: center;"><br>DopplerServer.doppler.shedEnvelopes 
                       + DopplerServer.TruncatingBuffer.totalDroppedMessages<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>The number of messages dropped per sink: the lifetime (since this VM started) total number of messages 
                    intentionally dropped by Doppler from all of its sinks due to back pressure.<br>
                    The metric <code>DopplerServer.TruncatingBuffer.totalDroppedMessages</code> is 
                    being transitioned to <code>DopplerServer.doppler.shedEnvelopes</code>. 
                    In PCF v1.10, both metrics are still present and should be combined to present a full picture of dropped messages. 
                    In PCF v1.10, truncating buffer usage is approximately 5% of all possible traffic, primarily syslog drains.
                    <br><br>
                    <strong>Use</strong>: Set an alert to indicate if there is too much traffic coming in to the Dopplers 
                     or if the Firehose consumers are not keeping pace. 
                     Both issues result in dropped messages. This metric is an important indicator of consistent logging.
                 <br><br>
                 <strong>Origin</strong>: Doppler/Firehose<br>
                 <strong>Type</strong>: Counter (Integer)<br>
                 <strong>Frequency</strong>: 5 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Maximum delta per minute of <code>derived=(dopplerserver.doppler.shedenvelopes + dopplerServer.TruncatingBuffer.totalDroppedMessages)</code>
                    over a 5-minute window</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: &ge; 5<br>
                <strong>Red critical</strong>: &ge; 10</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                        Scale up the Firehose log receiver and Dopplers.
                    </td>
        </tr>
</table>

## <a id="bosh"></a> System (BOSH) Metrics

###<a id="healthy"></a>VM Health
<table>
     <tr><th colspan="2" style="text-align: center;"><br>system.healthy<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td><code>1</code> means the system is healthy, and <code>0</code> means the system is not healthy.
                <br><br>
                <strong>Use</strong>: This is the most important BOSH metric to monitor. 
                 It indicates if the VM emitting the metric is healthy.
                 Review this metric for all VMs to estimate the overall health of the system.
                 <br><br>
                 <strong>Origin</strong>: JMX Bridge or BOSH HM Forwarder<br>
                 <strong>Type</strong>: Gauge (Float, 0-1)<br>
                 <strong>Frequency</strong>: 60 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Average over the last 5 minutes of <code>system.healthy</code></td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: <em>N/A</em> <br>
                <strong>Red critical</strong>: &lt; 1</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                        Investigate CF logs for the unhealthy component(s).<br>
                        Multiple unhealthy VMs signals problems with the underlying IAAS layer.
                    </td>
        </tr>
</table>


###<a id="mem.percent"></a>VM Memory Used
<table>
     <tr><th colspan="2" style="text-align: center;"><br>system.mem.percent<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>System Memory — Percentage of memory used on the VM 
                        <br><br>
                 <strong>Use</strong>: Set an alert and investigate if the free RAM is low over an extended period. 
                 <br><br>
                 <strong>Origin</strong>: JMX Bridge or BOSH HM Forwarder<br>
                 <strong>Type</strong>: Gauge (%)<br>
                 <strong>Frequency</strong>: 60 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Average over the last 10 minutes of <code>system.mem.percent</code></td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: &ge; 80%<br>
                <strong>Red critical</strong>:&ge; 90%</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    The response depends on the job.
                </td>
        </tr>
</table>

###<a id="disk.system.percent"></a>VM Disk Used
<table>
     <tr><th colspan="2" style="text-align: center;"><br>system.disk.system.percent<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>System disk — Percentage of the system disk used on the VM
                        <br><br>
                 <strong>Use</strong>: Set an alert to indicate when the system disk is almost full.
                 <br><br>
                 <strong>Origin</strong>: JMX Bridge or BOSH HM Forwarder<br>
                 <strong>Type</strong>: Gauge (%)<br>
                 <strong>Frequency</strong>: 60 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Average over the last 30 minutes of <code>system.disk.system.percent</code></td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: &ge; 80%</br>
                <strong>Red critical</strong>: &ge; 90%</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    Investigate what is filling the jobs system partition. <br>
                    This partition should not fill because BOSH deploys jobs to use ephemeral and persistent disks.</li>
                    </td>
        </tr>
</table>


###<a id="disk.ephemeral.percent"></a>VM Ephemeral Disk Used
<table>
     <tr><th colspan="2" style="text-align: center;"><br>system.disk.ephemeral.percent<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Ephemeral disk — Percentage of the ephemeral disk used on the VM
                <br><br>
               <strong>Use</strong>: Set an alert and investigate if the ephemeral 
                disk usage is too high for a job over an extended period.
                <br><br>
                <strong>Origin</strong>: JMX Bridge or BOSH HM Forwarder<br>
                <strong>Type</strong>: Gauge (%)<br>
                <strong>Frequency</strong>: 60 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Average over the last 30 minutes of <code>system.disk.ephermal.percent</code></td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: &ge; 80%</br>
                <strong>Red critical</strong>: &ge; 90%</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Run <code>bosh vms --details</code> to view jobs on affected deployments.</li>
                        <li>Determine cause of the disk usage, and, if appropriate, 
                            increase disk space or scale out the affected jobs.</li>
                    </ol>
                    </td>
        </tr>
</table>


###<a id="disk.persistent.percent"></a>VM System Disk Used
<table>
     <tr><th colspan="2" style="text-align: center;"><br>system.disk.persistent.percent<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Persistent disk — Percentage of persistent disk used on the VM
                        <br><br>
                <strong>Use</strong>: Set an alert and investigate further if the persistent disk usage for a job is too high 
                over an extended period.
                        <br><br>
                 <strong>Origin</strong>: JMX Bridge or BOSH HM Forwarder<br>
                 <strong>Type</strong>: Gauge (%)<br>
                 <strong>Frequency</strong>: 60 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Average over the last 30 minutes of <code>system.disk.persistent.percent<code></td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: &ge; 80%<br>
                <strong>Red critical</strong>: &ge; 90%</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Issue <code>bosh vms --details</code> to view jobs on affected deployments.</li>
                        <li>Determine cause of the data consumption, and, if appropriate, 
                            increase disk space or scale out affected jobs.</li>
                    </ol>
                    </td>
        </tr>
</table>

###<a id="cpu.user"></a>VM CPU Utilization
<table>
     <tr><th colspan="2" style="text-align: center;"><br>system.cpu.user<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>CPU utilization — The percentage of CPU spent in user processes
                <br><br>
                <strong>Use</strong>: Set an alert and investigate further if the CPU utilitization is
                too high for a job.<br>
                For monitoring Gorouter performance, CPU utilization of the Gorouter VM is 
                the recommended key capacity scaling indicator.
                For more information, see <a href="./key-cap-scaling.html#system.cpu.user">Gorouter Latency and Throughput</a>.
                <br><br>
                <strong>Origin</strong>: JMX Bridge or BOSH HM Forwarder<br>
                <strong>Type</strong>: Gauge (%)<br>
                <strong>Frequency</strong>: 60 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Average over the last 5 minutes of <code>system.cpu.user</code></td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: &ge; 85%<br>
                <strong>Red critical</strong>: &ge; 95%</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Investigate the cause of the spike.</li>
                        <li>If the cause is a normal workload increase, then scale up the affected jobs.</li>
                    </ol>
                    </td>
        </tr>
</table>



